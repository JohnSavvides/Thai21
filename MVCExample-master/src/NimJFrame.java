/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author student
 */
public class NimJFrame extends javax.swing.JFrame {

    private int gameState;
    private int whoseTurn;
    private final String difficulty;
    private final boolean playingCPU;
    private int totalScore;
    /**
     * Creates new form NimJFrame
     */
    public NimJFrame(String dif) {
        initComponents();
        
        this.difficulty = dif;
        this.playingCPU = !this.difficulty.equals(Constants.PVP);
        this.newGame();
    }

    public void newGame() {
        this.totalScore = Constants.INITIAL_PILE_SIZE;
        this.gameState = Constants.IN_PLAY;
        this.lblScore.setText(""+this.totalScore);
        this.lblTurn.setText("Player 1's turn");
        this.whoseTurn = Constants.P1TURN;
        if (difficulty.equals(Constants.HARD)) {
            cpuMakeMove();
        }
    }
    
    private void checkForWinner() {
        if (this.totalScore == 0) {
            int winner = whoseTurn;
            lblTurn.setText("Player "+winner+" wins!");
            this.gameState = winner;
        }
    }
    
    private void updateTurn() {
        this.whoseTurn = (this.whoseTurn == Constants.P1TURN ? Constants.P2TURN : Constants.P1TURN);
        lblTurn.setText("Player "+this.whoseTurn+"'s turn");
    }
    
    private void checkForWinnerAndUpdateTurn() {
        this.checkForWinner();
        if (this.gameState == Constants.IN_PLAY) {
            this.updateTurn();
        }
    }
    
    private int moveToWin() {
        if (totalScore % 4 == 0) {
            return 1+(int)(Math.random()*3);
        } else {
            return totalScore % 4;
        } 
    }
    
    private void cpuMakeMove() {
        int score = 0;
        int multiply = 3;
        if (this.totalScore < 3) {
            multiply = this.totalScore;
        }
        if (this.difficulty.equals(Constants.EASY)) {
            score = 1+(int)(Math.random()*multiply);
        } else {
            score = moveToWin();
        }
        this.updateScore(score);
        this.checkForWinnerAndUpdateTurn();
    }
    
    private void updateScore(int scoreToRemove) {
        this.totalScore = this.totalScore - scoreToRemove;
        lblScore.setText(""+this.totalScore);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTurn = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTurn.setText("Player \"\" turn");

        lblScore.setText("jLabel1");

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 7, 0));

        jButton1.setText("1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClicked(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton2.setText("2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClicked(evt);
            }
        });
        jPanel1.add(jButton2);

        jButton3.setText("3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClicked(evt);
            }
        });
        jPanel1.add(jButton3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblScore, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104))))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblScore, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClicked
        // TODO add your handling code here:
        javax.swing.JButton btn = (javax.swing.JButton) evt.getSource();
        int btnScore = Integer.parseInt(btn.getText());
        if (btnScore <= this.totalScore) {
            this.updateScore(btnScore);
            this.checkForWinnerAndUpdateTurn();
            if (playingCPU && this.gameState == Constants.IN_PLAY) {
                cpuMakeMove();
            }
        }
    }//GEN-LAST:event_btnClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblTurn;
    // End of variables declaration//GEN-END:variables
}
